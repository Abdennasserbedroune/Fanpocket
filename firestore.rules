rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user is admin (via custom claims)
    // In MVP, this will always return false until admin claims are set up
    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }
    
    // Users collection: read/write only by owner
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    // Profiles collection: read own/write own
    match /profiles/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    // Teams collection: read public, write for authenticated users (for seeding)
    // TODO: In production, restrict write to admin only
    match /teams/{teamId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
